name: Deploy jdungeon
on: [push]

env:
  GODOT_VERSION: "4.1.2"
  EXPORT_NAME: jdungeon
  PROJECT_PATH: ./
  JDUNGEON_REF: main


jobs:
  generate-version-file:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H-%M-%S")
          JSON_CONTENT="{\"version\": \"${{ env.JDUNGEON_REF }}-$TIMESTAMP\"}"
          echo $JSON_CONTENT > .version.json
      - name: Upload Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          name: jdungeon-version
          path: .version.json
  deploy-database:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "jdungeon-database"
          target: ./
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB
          script: |
            cd jdungeon-database
            docker-compose down --rmi all --remove-orphans
            docker-compose up -d

  deploy-website:
    runs-on: ubuntu-latest
    needs: deploy-database
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "jdungeon-website/docker-compose.yml"
          target: ./
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        env:
          CERT_PATH: ${{ secrets.CERT_PATH }}
          KEY_PATH: ${{ secrets.KEY_PATH }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: CERT_PATH,KEY_PATH
          script: |
            cd jdungeon-website
            mkdir images
            docker-compose down --rmi all --remove-orphans
            docker-compose up -d

  build-linux:
    name: Linux Export
    runs-on: ubuntu-22.04
    container:
      image: mawakajaka/godot:v1.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: jonathaneeckhout/jdungeon
          ref: ${{ env.JDUNGEON_REF }}
          token: ${{ github.token }}
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono
      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          cd $PROJECT_PATH
          /Godot_v${GODOT_VERSION}-stable_mono_linux_x86_64/Godot_v${GODOT_VERSION}-stable_mono_linux.x86_64 -v --headless --export-release "Linux/X11" build/linux/$EXPORT_NAME.x86_64
          /Godot_v${GODOT_VERSION}-stable_mono_linux_x86_64/Godot_v${GODOT_VERSION}-stable_mono_linux.x86_64 -v --headless --export-release "Linux/X11" build/linux/$EXPORT_NAME.x86_64
      - name: Add config
        run: |
          touch build/linux/.env
          echo "DEBUG=false" >> build/linux/.env
          echo "RUN_AS_CLIENT=true" >> build/linux/.env
          echo "SERVER_ADDRESS=${{ vars.SERVER_ADDRESS }}" >> build/linux/.env
          echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> build/linux/.env
          echo "VERSION_FILE=.version.json" >> build/linux/.env
      - name: Add version file
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H-%M-%S")
          JSON_CONTENT="{\"version\": \"${{ env.JDUNGEON_REF }}-$TIMESTAMP\"}"
          echo $JSON_CONTENT > build/linux/.version.json
      - name: Upload Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          name: jdungeon-linux
          path: build/linux

  build-windows:
    name: Windows Export
    runs-on: ubuntu-22.04
    container:
      image: mawakajaka/godot:v1.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: jonathaneeckhout/jdungeon
          ref: ${{ env.JDUNGEON_REF }}
          token: ${{ github.token }}
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          cd $PROJECT_PATH
          /Godot_v${GODOT_VERSION}-stable_mono_linux_x86_64/Godot_v${GODOT_VERSION}-stable_mono_linux.x86_64 -v --headless --export-release "Windows Desktop" build/windows/$EXPORT_NAME.exe
          /Godot_v${GODOT_VERSION}-stable_mono_linux_x86_64/Godot_v${GODOT_VERSION}-stable_mono_linux.x86_64 -v --headless --export-release "Windows Desktop" build/windows/$EXPORT_NAME.exe
      - name: Add config
        run: |
          touch build/windows/.env
          echo "DEBUG=false" >> build/windows/.env
          echo "RUN_AS_CLIENT=true" >> build/windows/.env
          echo "SERVER_ADDRESS=${{ vars.SERVER_ADDRESS }}" >> build/windows/.env
          echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> build/windows/.env
          echo "VERSION_FILE=.version.json" >> build/windows/.env
      - name: Add version file
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H-%M-%S")
          JSON_CONTENT="{\"version\": \"${{ env.JDUNGEON_REF }}-$TIMESTAMP\"}"
          echo $JSON_CONTENT > build/windows/.version.json
      - name: Upload Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          name: jdungeon-windows
          path: build/windows

  push_images_to_webserver:
    name: Push images to webserver
    runs-on: ubuntu-latest
    needs: [generate-version-file, build-linux, build-windows, deploy-website]
    steps:
      - name: Install zip
        uses: montudor/action-zip@v1
      - name: Download Version artifacts
        uses: actions/download-artifact@v3
        with:
          name: jdungeon-version
          path: images/version
      - name: mv version file
        run: mv .version.json ../.version.json
      - name: Remove the version artifacts
        run: rm -rf images/version
        working-directory: images/version
      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: jdungeon-linux
          path: images/linux
      - name: Zip linux image
        run: zip -r ../jdungeon-linux.zip .
        working-directory: images/linux
      - name: Remove the linux artifacts
        run: rm -rf images/linux
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: jdungeon-windows
          path: images/windows
      - name: Zip windows image
        run: zip -r ../jdungeon-windows.zip .
        working-directory: images/windows
      - name: Remove the windows artifacts
        run: rm -rf images/windows
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "images/.version.json,images/jdungeon-linux.zip,images/jdungeon-windows.zip"
          target: ./jdungeon-website

  deploy-server:
    runs-on: ubuntu-latest
    needs: deploy-database
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "jdungeon-server/docker-compose.yml"
          target: ./
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        env:
          DEBUG: "false"
          RUN_AS_SERVER: "true"
          SERVER_PORT: ${{ vars.SERVER_PORT }}
          SERVER_CRT : ${{ secrets.CERT_PATH }}
          SERVER_KEY: ${{ secrets.KEY_PATH }}
          SERVER_MAX_PEERS: 128
          SERVER_DATABASE_BACKEND: "postgres"
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DEBUG, RUN_AS_SERVER, SERVER_PORT, SERVER_CRT, SERVER_KEY, SERVER_MAX_PEERS, SERVER_DATABASE_BACKEND, POSTGRES_HOST, POSTGRES_PORT, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB 
          script: |
            cd jdungeon-server
            docker-compose down --rmi all --remove-orphans
            docker-compose up -d