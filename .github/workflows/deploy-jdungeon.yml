name: Deploy jdungeon
on: [push]

env:
  GODOT_VERSION: "4.1"
  EXPORT_NAME: Jdungeon-client
  PROJECT_PATH: ./
  JDUNGEON_CLIENT_REF: v0.0.10


jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "jdungeon-database/docker-compose.yml"
          target: ./
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB
          script: |
            cd jdungeon-database
            docker-compose down --rmi all --remove-orphans
            docker-compose up -d

  create-levels-in-database:
    runs-on: ubuntu-latest
    needs: deploy-database
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.10
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: PGPASSWORD
          script: |
            apt-get install -y postgresql-client
            psql -h ${{ secrets.POSTGRES_HOST }} -p ${{ secrets.POSTGRES_PORT }} -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c "DELETE FROM levels;"
            psql -h ${{ secrets.POSTGRES_HOST }} -p ${{ secrets.POSTGRES_PORT }} -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c "INSERT INTO levels (level, key, address, port) VALUES ('${{ secrets.LEVEL }}', '${{ secrets.SECRET }}', '${{ secrets.SSH_HOST }}', '${{ secrets.LEVEL_PORT }}');"

  deploy-website:
    runs-on: ubuntu-latest
    needs: deploy-database
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "jdungeon-website/docker-compose.yml"
          target: ./
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_KEY: ${{ secrets.MAIL_KEY }}
          CERT_PATH: ${{ secrets.CERT_PATH }}
          KEY_PATH: ${{ secrets.KEY_PATH }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: POSTGRES_HOST,POSTGRES_PORT,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,MAIL_HOST,MAIL_PORT,MAIL_USER,MAIL_KEY,CERT_PATH,KEY_PATH
          script: |
            cd jdungeon-website
            mkdir images
            docker-compose down --rmi all --remove-orphans
            docker-compose up -d

  build-client-linux:
    name: Client Linux Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: jonathaneeckhout/jdungeon-client
          ref: ${{ env.JDUNGEON_CLIENT_REF }}
          token: ${{ github.token }}
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          cd $PROJECT_PATH
          godot -v --headless --export-release "Linux/X11" build/linux/$EXPORT_NAME.x86_64
      - name: Add config
        run: |
          touch build/linux/.env
          echo "DEBUG=false" >> build/linux/.env
          echo "COMMON_SERVER_ADDRESS=${{ vars.COMMON_SERVER_ADDRESS }}" >> build/linux/.env
          echo "COMMON_SERVER_HOST=${{ vars.COMMON_SERVER_HOST }}" >> build/linux/.env
          echo "COMMON_SERVER_PORT=${{ vars.COMMON_SERVER_PORT }}" >> build/linux/.env
      - name: Upload Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          name: jdungeon-client-linux
          path: build/linux

  build-client-windows:
    name: Client Windows Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: jonathaneeckhout/jdungeon-client
          ref: ${{ env.JDUNGEON_CLIENT_REF }}
          token: ${{ github.token }}
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          cd $PROJECT_PATH
          godot -v --headless --export-release "Windows Desktop" build/windows/$EXPORT_NAME.exe
      - name: Add config
        run: |
          touch build/windows/.env
          echo "DEBUG=false" >> build/windows/.env
          echo "COMMON_SERVER_ADDRESS=${{ vars.COMMON_SERVER_ADDRESS }}" >> build/windows/.env
          echo "COMMON_SERVER_HOST=${{ vars.COMMON_SERVER_HOST }}" >> build/windows/.env
          echo "COMMON_SERVER_PORT=${{ vars.COMMON_SERVER_PORT }}" >> build/windows/.env
      - name: Upload Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          name: jdungeon-client-windows
          path: build/windows

  push_client_images_to_webserver:
    name: Push client images to webserver
    runs-on: ubuntu-latest
    needs: [build-client-linux, build-client-windows, deploy-website]
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: jdungeon-client-linux
          path: images/linux
      - name: Install zip
        uses: montudor/action-zip@v1
      - name: Zip linux client
        run: zip -r ../jdungeon-client-linux.zip .
        working-directory: images/linux
      - name: Remove the linux artifacts
        run: rm -rf images/linux
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: jdungeon-client-windows
          path: images/windows
      - name: Zip windows client
        run: zip -r ../jdungeon-client-windows.zip .
        working-directory: images/windows
      - name: Remove the windows artifacts
        run: rm -rf images/windows
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "images/jdungeon-client-linux.zip,images/jdungeon-client-windows.zip"
          target: ./jdungeon-website

  deploy-common-server:
    runs-on: ubuntu-latest
    needs: deploy-database
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "jdungeon-common-server/docker-compose.yml"
          target: ./
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          STARTER_LEVEL: "Grassland"
          STARTER_POS: '{"x":128.0,"y":128.0}'
          APP_PORT: ${{ secrets.APP_PORT }}
          APP_CRT: ${{ secrets.CERT_PATH }}
          APP_KEY: ${{ secrets.KEY_PATH }}
          COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: POSTGRES_HOST,POSTGRES_PORT,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,STARTER_LEVEL,STARTER_POS,APP_PORT,APP_CRT,APP_KEY,COOKIE_SECRET
          script: |
            cd jdungeon-common-server
            docker-compose down --rmi all --remove-orphans
            docker-compose up -d

  deploy-level-server:
    runs-on: ubuntu-latest
    needs: [create-levels-in-database, deploy-common-server]
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "jdungeon-level-server/docker-compose.yml"
          target: ./
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        env:
          DEBUG: "false"
          LEVEL_PORT: ${{ secrets.LEVEL_PORT }}
          LEVEL_MAX_PEERS: 128
          LEVEL: ${{ secrets.LEVEL }}
          SECRET: ${{ secrets.SECRET }}
          LEVEL_CRT: ${{ secrets.CERT_PATH }}
          LEVEL_KEY: ${{ secrets.KEY_PATH }}
          COMMON_SERVER_ADDRESS: ${{ secrets.COMMON_SERVER_ADDRESS }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DEBUG,LEVEL_PORT,LEVEL_MAX_PEERS,LEVEL,SECRET,LEVEL_CRT,LEVEL_KEY,COMMON_SERVER_ADDRESS
          script: |
            cd jdungeon-level-server
            docker-compose down --rmi all --remove-orphans
            docker-compose up -d